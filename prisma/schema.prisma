generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  // provider = "sqlite"
  // url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  links         Link[]
  profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String  @id @default(cuid())
  name        String
  image       String?
  slug        String? @unique
  description String?
  published   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  index       Int
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  links       Link[]

  @@index([userId])
}

model Link {
  id           String    @id @default(cuid())
  title        String
  videoId      String
  thumbnailUrl String
  index        Int
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String?

  @@index([userId])
  @@index([categoryId])
}
